// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230621211103_updateImgShare1")]
    partial class updateImgShare1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDecription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalDate")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("API.Data.Entities.BlogDestination", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("BlogDestination");
                });

            modelBuilder.Entity("API.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int?>("ImageShareId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int?>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewDestinationId")
                        .HasColumnType("int");

                    b.Property<int>("TypeComment")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("enumStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ImageShareId");

                    b.HasIndex("NewId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReviewDestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("API.Data.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NumberStar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceAdv")
                        .HasColumnType("int");

                    b.Property<bool>("ProvinceOrArea")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeRecomment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeDestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.Property<string>("WhoGoTogether")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeDestinationId");

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("API.Data.Entities.Dictrict", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Dictricts");
                });

            modelBuilder.Entity("API.Data.Entities.ImageBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("ImageBlogs");
                });

            modelBuilder.Entity("API.Data.Entities.ImageDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("ImageDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.ImageQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ImageQuestions");
                });

            modelBuilder.Entity("API.Data.Entities.ImageReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewDestinationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewDestinationId");

                    b.ToTable("ImageReviews");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ImageShares");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShareDestination", b =>
                {
                    b.Property<int>("ImageShareId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("ImageShareId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("ImageShareDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShareDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageShareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageShareId");

                    b.ToTable("ImageShareDetails");
                });

            modelBuilder.Entity("API.Data.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageShareId")
                        .HasColumnType("int");

                    b.Property<int>("NumberUserLike")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeLike")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ImageShareId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Data.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("API.Data.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Scope")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("API.Data.Entities.PlanDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DateNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDates");
                });

            modelBuilder.Entity("API.Data.Entities.PlanDestination", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("PlanId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("PlanDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("API.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("API.Data.Entities.QuestionDestination", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("DestinationId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.ReviewDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberStar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeVisitRecomment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhenGo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoGoTogether")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("API.Data.Entities.TypeDestination", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Data.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DictrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DictrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("DestinationPlanDate", b =>
                {
                    b.Property<int>("DestinationsId")
                        .HasColumnType("int");

                    b.Property<int>("PlanDatesId")
                        .HasColumnType("int");

                    b.HasKey("DestinationsId", "PlanDatesId");

                    b.HasIndex("PlanDatesId");

                    b.ToTable("DestinationPlanDate");
                });

            modelBuilder.Entity("API.Data.Entities.Blog", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.BlogDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Blog", "Blog")
                        .WithMany("BlogDestinations")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("BlogDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("API.Data.Entities.Comment", b =>
                {
                    b.HasOne("API.Data.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId");

                    b.HasOne("API.Data.Entities.ImageShare", null)
                        .WithMany("Comments")
                        .HasForeignKey("ImageShareId");

                    b.HasOne("API.Data.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("API.Data.Entities.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("API.Data.Entities.ReviewDestination", "ReviewDestination")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewDestinationId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("News");

                    b.Navigation("Question");

                    b.Navigation("ReviewDestination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.Destination", b =>
                {
                    b.HasOne("API.Data.Entities.TypeDestination", "TypeDestination")
                        .WithMany("Destinations")
                        .HasForeignKey("TypeDestinationId");

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Destinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.Ward", "Ward")
                        .WithMany("Destinations")
                        .HasForeignKey("WardId");

                    b.Navigation("TypeDestination");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("API.Data.Entities.Dictrict", b =>
                {
                    b.HasOne("API.Data.Entities.Province", "Province")
                        .WithMany("Dictricts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("API.Data.Entities.ImageBlog", b =>
                {
                    b.HasOne("API.Data.Entities.Blog", "Blog")
                        .WithMany("ImageBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("API.Data.Entities.ImageDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("ImageDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("API.Data.Entities.ImageQuestion", b =>
                {
                    b.HasOne("API.Data.Entities.Question", "Question")
                        .WithMany("ImageQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Data.Entities.ImageReview", b =>
                {
                    b.HasOne("API.Data.Entities.ReviewDestination", "ReviewDestination")
                        .WithMany("ImageReviews")
                        .HasForeignKey("ReviewDestinationId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ReviewDestination");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShare", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShareDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("ImageShareDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.ImageShare", "ImageShare")
                        .WithMany("ImageShareDestinations")
                        .HasForeignKey("ImageShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("ImageShare");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShareDetail", b =>
                {
                    b.HasOne("API.Data.Entities.ImageShare", "ImageShare")
                        .WithMany("ImageShareDetails")
                        .HasForeignKey("ImageShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageShare");
                });

            modelBuilder.Entity("API.Data.Entities.Like", b =>
                {
                    b.HasOne("API.Data.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("API.Data.Entities.ImageShare", "ImageShare")
                        .WithMany("Likes")
                        .HasForeignKey("ImageShareId");

                    b.HasOne("API.Data.Entities.Question", "Question")
                        .WithMany("Likes")
                        .HasForeignKey("QuestionId");

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("ImageShare");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.News", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.Plan", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.PlanDate", b =>
                {
                    b.HasOne("API.Data.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("API.Data.Entities.PlanDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("PlanDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.Plan", "Plan")
                        .WithMany("PlanDestinations")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("API.Data.Entities.Question", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.QuestionDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("QuestionDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.Question", "Question")
                        .WithMany("QuestionDestinations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Data.Entities.ReviewDestination", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", "Destination")
                        .WithMany("ReviewDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("ReviewDestinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.HasOne("API.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Data.Entities.Ward", b =>
                {
                    b.HasOne("API.Data.Entities.Dictrict", "Dictrict")
                        .WithMany("Wards")
                        .HasForeignKey("DictrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictrict");
                });

            modelBuilder.Entity("DestinationPlanDate", b =>
                {
                    b.HasOne("API.Data.Entities.Destination", null)
                        .WithMany()
                        .HasForeignKey("DestinationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.PlanDate", null)
                        .WithMany()
                        .HasForeignKey("PlanDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Entities.Blog", b =>
                {
                    b.Navigation("BlogDestinations");

                    b.Navigation("Comments");

                    b.Navigation("ImageBlogs");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("API.Data.Entities.Destination", b =>
                {
                    b.Navigation("BlogDestinations");

                    b.Navigation("ImageDestinations");

                    b.Navigation("ImageShareDestinations");

                    b.Navigation("PlanDestinations");

                    b.Navigation("QuestionDestinations");

                    b.Navigation("ReviewDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.Dictrict", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("API.Data.Entities.ImageShare", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImageShareDestinations");

                    b.Navigation("ImageShareDetails");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("API.Data.Entities.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("API.Data.Entities.Plan", b =>
                {
                    b.Navigation("PlanDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.Province", b =>
                {
                    b.Navigation("Dictricts");
                });

            modelBuilder.Entity("API.Data.Entities.Question", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImageQuestions");

                    b.Navigation("Likes");

                    b.Navigation("QuestionDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.ReviewDestination", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImageReviews");
                });

            modelBuilder.Entity("API.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Entities.TypeDestination", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Destinations");

                    b.Navigation("Likes");

                    b.Navigation("News");

                    b.Navigation("Plans");

                    b.Navigation("Questions");

                    b.Navigation("ReviewDestinations");
                });

            modelBuilder.Entity("API.Data.Entities.Ward", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
